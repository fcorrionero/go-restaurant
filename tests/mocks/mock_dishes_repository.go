// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fcorrionero/go-restaurant/domain (interfaces: DishesRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/fcorrionero/go-restaurant/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDishesRepository is a mock of DishesRepository interface.
type MockDishesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDishesRepositoryMockRecorder
}

// MockDishesRepositoryMockRecorder is the mock recorder for MockDishesRepository.
type MockDishesRepositoryMockRecorder struct {
	mock *MockDishesRepository
}

// NewMockDishesRepository creates a new mock instance.
func NewMockDishesRepository(ctrl *gomock.Controller) *MockDishesRepository {
	mock := &MockDishesRepository{ctrl: ctrl}
	mock.recorder = &MockDishesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDishesRepository) EXPECT() *MockDishesRepositoryMockRecorder {
	return m.recorder
}

// FindDishById mocks base method.
func (m *MockDishesRepository) FindDishById(arg0 uuid.UUID) *domain.DishAggregate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDishById", arg0)
	ret0, _ := ret[0].(*domain.DishAggregate)
	return ret0
}

// FindDishById indicates an expected call of FindDishById.
func (mr *MockDishesRepositoryMockRecorder) FindDishById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDishById", reflect.TypeOf((*MockDishesRepository)(nil).FindDishById), arg0)
}

// FindDishByName mocks base method.
func (m *MockDishesRepository) FindDishByName(arg0 string) *domain.DishAggregate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDishByName", arg0)
	ret0, _ := ret[0].(*domain.DishAggregate)
	return ret0
}

// FindDishByName indicates an expected call of FindDishByName.
func (mr *MockDishesRepositoryMockRecorder) FindDishByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDishByName", reflect.TypeOf((*MockDishesRepository)(nil).FindDishByName), arg0)
}

// FindDishesByAllergen mocks base method.
func (m *MockDishesRepository) FindDishesByAllergen(arg0 string) []*domain.DishAggregate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDishesByAllergen", arg0)
	ret0, _ := ret[0].([]*domain.DishAggregate)
	return ret0
}

// FindDishesByAllergen indicates an expected call of FindDishesByAllergen.
func (mr *MockDishesRepositoryMockRecorder) FindDishesByAllergen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDishesByAllergen", reflect.TypeOf((*MockDishesRepository)(nil).FindDishesByAllergen), arg0)
}

// FindDishesByAllergenId mocks base method.
func (m *MockDishesRepository) FindDishesByAllergenId(arg0 uuid.UUID) []*domain.DishAggregate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDishesByAllergenId", arg0)
	ret0, _ := ret[0].([]*domain.DishAggregate)
	return ret0
}

// FindDishesByAllergenId indicates an expected call of FindDishesByAllergenId.
func (mr *MockDishesRepositoryMockRecorder) FindDishesByAllergenId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDishesByAllergenId", reflect.TypeOf((*MockDishesRepository)(nil).FindDishesByAllergenId), arg0)
}

// SaveDish mocks base method.
func (m *MockDishesRepository) SaveDish(arg0 *domain.DishAggregate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveDish", arg0)
}

// SaveDish indicates an expected call of SaveDish.
func (mr *MockDishesRepositoryMockRecorder) SaveDish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDish", reflect.TypeOf((*MockDishesRepository)(nil).SaveDish), arg0)
}
