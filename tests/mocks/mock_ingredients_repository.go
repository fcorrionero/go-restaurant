// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fcorrionero/go-restaurant/domain (interfaces: IngredientsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/fcorrionero/go-restaurant/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIngredientsRepository is a mock of IngredientsRepository interface.
type MockIngredientsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIngredientsRepositoryMockRecorder
}

// MockIngredientsRepositoryMockRecorder is the mock recorder for MockIngredientsRepository.
type MockIngredientsRepositoryMockRecorder struct {
	mock *MockIngredientsRepository
}

// NewMockIngredientsRepository creates a new mock instance.
func NewMockIngredientsRepository(ctrl *gomock.Controller) *MockIngredientsRepository {
	mock := &MockIngredientsRepository{ctrl: ctrl}
	mock.recorder = &MockIngredientsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngredientsRepository) EXPECT() *MockIngredientsRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockIngredientsRepository) FindAll() []*domain.Ingredient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*domain.Ingredient)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIngredientsRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIngredientsRepository)(nil).FindAll))
}

// FindAllByAllergen mocks base method.
func (m *MockIngredientsRepository) FindAllByAllergen(arg0 uuid.UUID) []*domain.Ingredient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByAllergen", arg0)
	ret0, _ := ret[0].([]*domain.Ingredient)
	return ret0
}

// FindAllByAllergen indicates an expected call of FindAllByAllergen.
func (mr *MockIngredientsRepositoryMockRecorder) FindAllByAllergen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByAllergen", reflect.TypeOf((*MockIngredientsRepository)(nil).FindAllByAllergen), arg0)
}

// FindById mocks base method.
func (m *MockIngredientsRepository) FindById(arg0 uuid.UUID) *domain.Ingredient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*domain.Ingredient)
	return ret0
}

// FindById indicates an expected call of FindById.
func (mr *MockIngredientsRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockIngredientsRepository)(nil).FindById), arg0)
}

// FindByName mocks base method.
func (m *MockIngredientsRepository) FindByName(arg0 string) *domain.Ingredient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0)
	ret0, _ := ret[0].(*domain.Ingredient)
	return ret0
}

// FindByName indicates an expected call of FindByName.
func (mr *MockIngredientsRepositoryMockRecorder) FindByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockIngredientsRepository)(nil).FindByName), arg0)
}

// Save mocks base method.
func (m *MockIngredientsRepository) Save(arg0 *domain.Ingredient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", arg0)
}

// Save indicates an expected call of Save.
func (mr *MockIngredientsRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIngredientsRepository)(nil).Save), arg0)
}
