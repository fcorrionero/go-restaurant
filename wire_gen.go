// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/fcorrionero/go-restaurant/src/application/query/find_dish_by_id"
	"github.com/fcorrionero/go-restaurant/src/application/query/find_dish_by_name"
	"github.com/fcorrionero/go-restaurant/src/application/query/find_dishes_by_allergen"
	"github.com/fcorrionero/go-restaurant/src/domain"
	"github.com/fcorrionero/go-restaurant/src/infrastructure/persistence/mongo"
	"github.com/fcorrionero/go-restaurant/src/infrastructure/persistence/mysql"
	"github.com/fcorrionero/go-restaurant/src/infrastructure/ui/dishes_http"
	mysql2 "gorm.io/driver/mysql"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
	"log"
	"os"
	"time"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func InitializeDishesRepository() domain.DishesRepository {
	dishesRepository := NewMongoDishesRepository()
	return dishesRepository
}

func InitializeDishesHttpController(dishesRepository domain.DishesRepository) dishes_http.DishesHttpController {
	queryHandler := find_dish_by_id.New(dishesRepository)
	find_dish_by_nameQueryHandler := find_dish_by_name.New(dishesRepository)
	find_dishes_by_allergenQueryHandler := find_dishes_by_allergen.New(dishesRepository)
	dishesHttpController := dishes_http.NewDishesHttpController(queryHandler, find_dish_by_nameQueryHandler, find_dishes_by_allergenQueryHandler)
	return dishesHttpController
}

// wire.go:

func NewMongoDishesRepository() domain.DishesRepository {
	return mongo.New("root", "example", "0.0.0.0", "27017", "go-restaurant")
}

func NewMysqlAllergensRepository(db *gorm.DB) domain.AllergensRepository {
	return mysql.NewAllergensRepository(db)
}

func NewMysqlIngredientsRepository(db *gorm.DB) domain.IngredientsRepository {
	return mysql.NewIngredientsRepository(db)
}

func NewMysqlDishesRepository(db *gorm.DB) domain.DishesRepository {
	return mysql.NewDishesRepository(db)
}

func StartGormDB() *gorm.DB {
	dsn := "root:example@/go_restaurant?charset=utf8mb4&parseTime=True&loc=Local"
	newLogger := logger.New(log.New(os.Stdout, "\r\n", log.LstdFlags), logger.Config{
		SlowThreshold: time.Second,
		LogLevel:      logger.Error,
		Colorful:      false,
	},
	)
	db, err := gorm.Open(mysql2.Open(dsn), &gorm.Config{
		Logger: newLogger,
	})
	if err != nil {
		log.Fatal(err)
	}
	return db
}
